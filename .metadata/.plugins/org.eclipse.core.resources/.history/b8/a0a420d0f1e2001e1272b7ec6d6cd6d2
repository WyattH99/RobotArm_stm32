/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include "pca9685.h"
#include <stdint.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

typedef struct{
	uint8_t  PotNum;
	uint16_t PotMin;
	uint16_t PotMax;
	uint8_t  ServoNum;
	uint16_t ServoMin;
	uint16_t ServoMax;
	uint16_t ServoHomeAngle;


} Joint_Config_t;

typedef struct{
	GPIO_TypeDef* GPIOx;
	uint16_t GPIO_Pin;
	uint8_t  ServoNum;
	uint16_t ServoMin;
	uint16_t ServoMax;
	uint16_t ServoHomeAngle;

} Gripper_Config_t;

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// Potentiometer Macros
#define POT_COUNT				4

// Servo Macros
#define SERVO_COUNT				5


/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */


volatile uint16_t 	adcRawResults [POT_COUNT];
const uint32_t 		adcChannelCount = sizeof(adcRawResults) / sizeof(adcRawResults[0]);

uint8_t ActiveServo = 0;
volatile float 	servoAngles [SERVO_COUNT];


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC1_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Used to map the Potentiometer Range (0-4096) to the Servo Range (0-180)
uint32_t MAP(uint32_t au32_IN, uint32_t au32_INmin, uint32_t au32_INmax, uint32_t au32_OUTmin, uint32_t au32_OUTmax)
{
    return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

  // Configure Each of the joints
  Joint_Config_t Base;
  Base.PotNum = 0;
  Base.PotMin = 800;
  Base.PotMax = 3400;
  Base.ServoNum = 0;
  Base.ServoMin = 0;
  Base.ServoMax = 180;
  Base.ServoHomeAngle = 90;

  Joint_Config_t Shoulder;
  Shoulder.PotNum = 1;
  Shoulder.PotMin = 600;
  Shoulder.PotMax = 3400;
  Shoulder.ServoNum = 1;
  Shoulder.ServoMin = 0;
  Shoulder.ServoMax = 180;
  Shoulder.ServoHomeAngle = 0;

  Joint_Config_t Elbow;
  Elbow.PotNum = 2;
  Elbow.PotMin = 600;
  Elbow.PotMax = 3400;
  Elbow.ServoNum = 2;
  Elbow.ServoMin = 50;
  Elbow.ServoMax = 180;
  Elbow.ServoHomeAngle = 180;

  Joint_Config_t Wrist;
  Wrist.PotNum = 3;
  Wrist.PotMin = 600;
  Wrist.PotMax = 3200;
  Wrist.ServoNum = 3;
  Wrist.ServoMin = 0;
  Wrist.ServoMax = 180;
  Wrist.ServoHomeAngle = 90;

  Gripper_Config_t Gripper;
  Gripper.GPIOx = GPIOA;
  Gripper.GPIO_Pin = GPIO_PIN_9;
  Gripper.ServoNum = 4;
  Gripper.ServoMin = 0;
  Gripper.ServoMax = 70;
  Gripper.ServoHomeAngle = Gripper.ServoMin;



  PCA9685_Init(&hi2c1);
  PCA9685_SetServoAngle(Base.ServoNum, Base.ServoHomeAngle);
  PCA9685_SetServoAngle(Shoulder.ServoNum, Shoulder.ServoHomeAngle);
  PCA9685_SetServoAngle(Elbow.ServoNum, Elbow.ServoHomeAngle);
  PCA9685_SetServoAngle(Wrist.ServoNum, Wrist.ServoHomeAngle);
  PCA9685_SetServoAngle(Gripper.ServoNum, Gripper.ServoHomeAngle);

  HAL_Delay(2000);



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for(uint8_t i=0; i<adcChannelCount; i++){
		  HAL_ADC_Start(&hadc1);
		  HAL_ADC_PollForConversion(&hadc1, 1);
		  adcRawResults[i] = HAL_ADC_GetValue(&hadc1);

		  if(i == Base.ServoNum){
			  // TODO: Add a Move Servo Function
			  if(adcRawResults[i] > Base.PotMax){
				  adcRawResults[i] = Base.PotMax;
			  }
			  if(adcRawResults[i] < Base.PotMin){
				  adcRawResults[i] = Base.PotMin;
			  }
			  servoAngles[i] = (float)MAP((uint32_t)adcRawResults[i], (uint32_t)Base.PotMin, (uint32_t)Base.PotMax, (uint32_t)Base.ServoMin, (uint32_t)Base.ServoMax);
			  PCA9685_SetServoAngle(Base.ServoNum, servoAngles[i]);
		  }

		  if(i == Shoulder.ServoNum){
			  if(adcRawResults[i] > Shoulder.PotMax){
				  adcRawResults[i] = Shoulder.PotMax;
			  }
			  if(adcRawResults[i] < Shoulder.PotMin){
				  adcRawResults[i] = Shoulder.PotMin;
			  }
			  servoAngles[i] = (float)MAP((uint32_t)adcRawResults[i], (uint32_t)Shoulder.PotMin, (uint32_t)Shoulder.PotMax, (uint32_t)Shoulder.ServoMin, (uint32_t)Shoulder.ServoMax);
			  PCA9685_SetServoAngle(Shoulder.ServoNum, servoAngles[i]);
		  }

		  if(i == Elbow.ServoNum){
			  if(adcRawResults[i] > Elbow.PotMax){
				  adcRawResults[i] = Elbow.PotMax;
			  }
			  if(adcRawResults[i] < Elbow.PotMin){
				  adcRawResults[i] = Elbow.PotMin;
			  }
			  servoAngles[i] = (float)MAP((uint32_t)adcRawResults[i], (uint32_t)Elbow.PotMin, (uint32_t)Elbow.PotMax, (uint32_t)Elbow.ServoMin, (uint32_t)Elbow.ServoMax);
			  PCA9685_SetServoAngle(Elbow.ServoNum, servoAngles[i]);
		  }

		  if(i == Wrist.ServoNum){
			  if(adcRawResults[i] > Wrist.PotMax){
				  adcRawResults[i] = Wrist.PotMax;
			  }
			  if(adcRawResults[i] < Wrist.PotMin){
				  adcRawResults[i] = Wrist.PotMin;
			  }
			  servoAngles[i] = Wrist.PotMax - adcRawResults[i] + Wrist.PotMin; // Invert the Wrist Potentiometer Signals
			  servoAngles[i] = (float)MAP((uint32_t)servoAngles[i], (uint32_t)Wrist.PotMin, (uint32_t)Wrist.PotMax, (uint32_t)Wrist.ServoMin, (uint32_t)Wrist.ServoMax);

			  PCA9685_SetServoAngle(Wrist.ServoNum, servoAngles[i]);
		  }

		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)){
			 PCA9685_SetServoAngle(Gripper.ServoNum, Gripper.ServoMin);
		  }else{
			 PCA9685_SetServoAngle(Gripper.ServoNum, Gripper.ServoMax);
		  }


	  }


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = ENABLE;
  hadc1.Init.NbrOfDiscConversion = 1;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  hadc1.Init.DMAContinuousRequests = DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
  sConfig.Rank = 3;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : GripperButton_Pin */
  GPIO_InitStruct.Pin = GripperButton_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GripperButton_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
